image: docker:latest

variables:
  REGISTRY: hb.k8sbridge.com
  DOCKER_DRIVER: overlay2
  CONTAINER_TEST_IMAGE: $REGISTRY/demo/spring-boot:$CI_COMMIT_SHORT_SHA
  CONTAINER_RELEASE_IMAGE: $REGISTRY/demo/spring-boot:latest
  KUBECTL_ARGUMENT: --token=$KUBERNETES_TOKEN --server=$KUBERNETES_SERVER --insecure-skip-tls-verify=true
  HARBOR_PASSWORD: $HARBOR_PW

services:
  - name: docker:latest

stages:
  - sast
  - build
  - dast
  - release
  - deploy

sast:sonarqube:
  tags:
    - docker
  image:
    name: hb.k8sbridge.com/demo/maven:base
  stage: sast
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn clean verify sonar:sonar -Dsonar.projectKey=test -Dsonar.sources=src -Dsonar.host.url=${SONAR_SERVER} -Dsonar.login=${SONAR_TOKEN} 
      -Dsonar.qualitygate.wait=true -Dsonar.java.binaries=target 
      -Dsonar.test.inclusions=**/*Test*/** -Dsonar.exclusions=**/*Test*/** 
      -Dsonar.working.directory=./target/.sonar
    - export url=$(cat ./target/.sonar/report-task.txt | grep ceTaskUrl | cut -c11- )
    - sleep 15s
    - curl -s -k -u "$SONAR_TOKEN":"" $url -o analysis.txt
    - export status=$(cat analysis.txt | jq -r '.task.status')
    - export analysisId=$(cat analysis.txt | jq -r '.task.analysisId')
    - |
      if [ "$status" != "SUCCESS" ];then
        echo -e "\e[91mSONAR ANALYSIS FAILED\e[0m"
        exit 1
      fi
    - curl -s -k -u "${SONAR_TOKEN}":"" "$SONAR_SERVER/api/qualitygates/project_status?analysisId=$analysisId" -o sonarqube-result.json
    - export result=$(cat sonarqube-result.json | jq -r '.projectStatus.status')
    - |
      if [ "$result" == "ERROR" ]; then
        echo -e "91mSONAR RESULTS FAILED"
        cat sonarqube-result.json | jq -r '.projectStatus.conditions'
        exit 1
      fi
    - echo -e "SONAR RESULTS SUCCESSFUL"
    - cat sonarqube-result.json | jq -r '.projectStatus.conditions'
  artifacts:
    reports:
      codequality: sonarqube-result.json

build:docker-image:
  tags:
    - docker
  stage: build
  dependencies:
    - sast:sonarqube
  script:
    - echo $HARBOR_PASSWORD | docker login -u "$HARBOR_USER" --password-stdin $REGISTRY
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
  artifacts:
    paths:
      - target/
    expire_in: 1 week

build:scan-image:
  tags:
    - docker
  variables:
    GIT_STRATEGY: none
  stage: build
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  allow_failure: true
  script:
    - echo $HARBOR_PASSWORD | docker login -u "$HARBOR_USER" --password-stdin $REGISTRY
    - ./trivy --version
    - ./trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format json -o gl-container-scanning-report.json $CONTAINER_TEST_IMAGE
    - ./trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress  $CONTAINER_TEST_IMAGE
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

dast:zap:
  tags:
    - docker
  stage: dast
  dependencies:
    - build:docker-image
  script:
    - echo "test"
